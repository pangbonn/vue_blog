import { ref } from 'vue'

export interface CacheData {
  id: string
  title: string
  content: string
  timestamp: number
  category: string
  author: string
  views: number
  likes: number
  imageUrl: string
}

export interface CacheStats {
  totalItems: number
  lastUpdated: number
  storageUsed: string
}

export function useCache() {
  const cacheKey = 'vue-pwa-cache'
  const cacheStatsKey = 'vue-pwa-cache-stats'
  
  // Reactive state
  const cachedData = ref<CacheData[]>([])
  const isLoading = ref(false)
  const lastRefresh = ref<number>(0)
  
  // Load data from localStorage
  const loadFromCache = (): CacheData[] => {
    try {
      const stored = localStorage.getItem(cacheKey)
      if (stored) {
        const data = JSON.parse(stored)
        cachedData.value = data
        return data
      }
    } catch (error) {
      console.error('Error loading from cache:', error)
    }
    return []
  }
  
  // Save data to localStorage
  const saveToCache = (data: CacheData[]): void => {
    try {
      localStorage.setItem(cacheKey, JSON.stringify(data))
      cachedData.value = data
      updateCacheStats()
    } catch (error) {
      console.error('Error saving to cache:', error)
    }
  }
  
  // Generate sample data
  const generateSampleData = (): CacheData[] => {
    const categories = ['‡∏Ç‡πà‡∏≤‡∏ß', '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', '‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û']
    const authors = ['‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å', '‡∏°‡∏≤‡∏•‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°', '‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô']
    const sampleData: CacheData[] = []
    
    const newsTitles = [
      '‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πà‡∏ß‡∏ô: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô',
      '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î',
      '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡πÇ‡∏•‡∏Å',
      '‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Æ‡∏¥‡∏ï',
      '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ',
      '‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÑ‡∏ó‡∏¢‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï',
      '‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà',
      '‡∏Å‡∏µ‡∏¨‡∏≤‡πÇ‡∏≠‡∏•‡∏¥‡∏°‡∏õ‡∏¥‡∏Å 2024',
      '‡∏î‡∏≤‡∏£‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà',
      '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
      '‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
      '‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà',
      '‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡πÑ‡∏ó‡∏¢‡∏•‡∏µ‡∏Å',
      '‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡πÉ‡∏´‡∏ç‡πà',
      '‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°',
      '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢',
      '‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÅ‡∏£‡∏á',
      '‡∏Å‡∏µ‡∏¨‡∏≤‡∏ü‡∏∏‡∏ï‡∏ã‡∏≠‡∏•',
      '‡∏•‡∏∞‡∏Ñ‡∏£‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°',
      '‡πÇ‡∏¢‡∏Ñ‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'
    ]
    
    const newsContent = [
      '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å cache ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô',
      '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á',
      '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ü‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å',
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏°',
      '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Ñ‡∏ß‡∏£‡∏£‡∏π‡πâ',
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
      '‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ',
      '‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å',
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç',
      '‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
    ]
    
    for (let i = 1; i <= 20; i++) {
      sampleData.push({
        id: `news-${i}`,
        title: newsTitles[i - 1] || '‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        content: newsContent[Math.floor(Math.random() * newsContent.length)] || '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
        timestamp: Date.now() - (i * 1000 * 60 * 30), // 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        category: categories[Math.floor(Math.random() * categories.length)] || '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        author: authors[Math.floor(Math.random() * authors.length)] || '‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô',
        views: Math.floor(Math.random() * 10000) + 100,
        likes: Math.floor(Math.random() * 500) + 10,
        imageUrl: `https://picsum.photos/400/300?random=${i}`
      })
    }
    
    return sampleData
  }
  
  // Load fresh data (simulate API call)
  const loadFreshData = async (): Promise<CacheData[]> => {
    isLoading.value = true
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    const freshData = generateSampleData()
    lastRefresh.value = Date.now()
    
    isLoading.value = false
    return freshData
  }
  
  // Initialize cache on first load
  const initializeCache = async (): Promise<void> => {
    const existingData = loadFromCache()
    
    if (existingData.length === 0) {
      // First time - load fresh data
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å...')
      const freshData = await loadFreshData()
      saveToCache(freshData)
      console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô cache ‡πÅ‡∏•‡πâ‡∏ß')
    } else {
      // Load from cache
      console.log('üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache')
      cachedData.value = existingData
    }
  }
  
  // Force refresh data
  const refreshData = async (): Promise<void> => {
    const freshData = await loadFreshData()
    saveToCache(freshData)
  }
  
  // Clear cache
  const clearCache = (): void => {
    localStorage.removeItem(cacheKey)
    localStorage.removeItem(cacheStatsKey)
    cachedData.value = []
    lastRefresh.value = 0
  }
  
  // Update cache statistics
  const updateCacheStats = (): void => {
    try {
      const stats: CacheStats = {
        totalItems: cachedData.value.length,
        lastUpdated: lastRefresh.value,
        storageUsed: `${(JSON.stringify(cachedData.value).length / 1024).toFixed(2)} KB`
      }
      localStorage.setItem(cacheStatsKey, JSON.stringify(stats))
    } catch (error) {
      console.error('Error updating cache stats:', error)
    }
  }
  
  // Get cache statistics
  const getCacheStats = (): CacheStats | null => {
    try {
      const stored = localStorage.getItem(cacheStatsKey)
      if (stored) {
        return JSON.parse(stored)
      }
    } catch (error) {
      console.error('Error getting cache stats:', error)
    }
    return null
  }
  
  // Filter data by category
  const filterByCategory = (category: string): CacheData[] => {
    if (category === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
      return cachedData.value
    }
    return cachedData.value.filter(item => item.category === category)
  }
  
  // Search data
  const searchData = (query: string): CacheData[] => {
    if (!query.trim()) {
      return cachedData.value
    }
    
    const lowercaseQuery = query.toLowerCase()
    return cachedData.value.filter(item => 
      item.title.toLowerCase().includes(lowercaseQuery) ||
      item.content.toLowerCase().includes(lowercaseQuery)
    )
  }
  
  return {
    // State
    cachedData,
    isLoading,
    lastRefresh,
    
    // Methods
    initializeCache,
    refreshData,
    clearCache,
    filterByCategory,
    searchData,
    getCacheStats,
    updateCacheStats
  }
}
